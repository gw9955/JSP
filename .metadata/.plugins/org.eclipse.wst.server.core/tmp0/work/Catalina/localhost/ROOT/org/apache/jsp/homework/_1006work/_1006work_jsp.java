/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2022-10-07 05:25:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.homework._1006work;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class _1006work_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("   1. 유효성 검사란 무엇인가?<br>\r\n");
      out.write("   - 유효성 검사는 사용자가 폼 페이지<form...>...</form>에서 입력한 데이터 값(name=“..”)이 서버(톰캣)<br>\r\n");
      out.write("\t  로 전송(요청)되기 전에 특정 규칙(Regular Expression – RegExp; 이메일 / 주민번호 / 아이디 / 비밀번호 / 전화번호..)<br>\r\n");
      out.write("\t  에 맞게 입력되었는지 검증(Validation)하는 것을 말합니다.<br>\r\n");
      out.write("   <hr />\r\n");
      out.write("   2. 유효성 검사를 위한 두 가지 처리 기법을 간단히 설명하시오.<br>\r\n");
      out.write("   - 기본 유효성 검사는 사용자가 폼 페이지<form...>...</form>의 입력 항목(name 속성을 갖은 요소(태그))에 입력한 데이터 값이<br>\r\n");
      out.write("   \t  있는지 없는지(if(대상.value==“”)) 확인하고 데이터 길이(document.폼name.요소name.value.length),<br>\r\n");
      out.write("   \t  숫자(isNaN(대상)) 등 기본적인 것이 맞는지 검사합니다.<br>\r\n");
      out.write("   - 데이터 형식 유효성 검사는 사용자가 폼 페이지<form...>...</form>의 입력 항목(name 속성을 갖은 요소(태그))에 입력한 데이터 값이 특정 형태에 적합한지<br>\r\n");
      out.write("          검사하기 위해 정규 표현식(RegExp)을 사용하는 방법으로 기본 유효성 검사보다 복잡합니다.<br>\r\n");
      out.write("   - ^(시작), $(종료), +(1이상), *(0이상), x(1,3) : 1~3, //내용//, i : ignore(대소문자 구별x), ?(아몰랑. 있을수도 없을수도 있다)<br>\r\n");
      out.write("   <hr />\r\n");
      out.write("   3. 유효성 검사를 위한 핸들러 함수와 폼 페이지를 작성하는 기법을 설명하시오.<br>\r\n");
      out.write("   - input 태그의 type 속성 값이 button인 경우 onclick 속성을 이용하여 핸들러 함수를 설정합니다. 또는 type 속성 값이 submit인 경우 form 태그의 onsubmit 속성 값에 설정합니다. ( button : onclick / submit : onsubmit)<br>\r\n");
      out.write("   - 자바스크립트를 이용하여 스크립트 내에 핸들러 함수를 작성합니다. 스크립트 구문은 JSP 페이지의 어디에 위치해도 괜찮습니다.<br>\r\n");
      out.write("   - 폼 페이지<form..>...</form>에서 입력된 데이터 값을 핸들러 함수(onclick=“check()”)로 가져오기 위해 form 태그의 name 속성<br>\r\n");
      out.write("   \t  또는 forms 객체를 이용합니다. forms 객체를 이용하는 경우, forms 객체는 배열의 형태이기 때문에 length 속성으로 크기를 알 수 있고 배열 값인 index는 form 태그가 나타나는 순서로 0부터 시작합니다.<br>\r\n");
      out.write("   <hr />\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
