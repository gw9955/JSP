/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2022-10-06 08:23:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ch08;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class validation05_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/D:/A_TeachingMaterial/3.HighJava/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/JSPBook/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1664261830921L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Validation-RegExp</title>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tfunction checkMember() {\r\n");
      out.write("\t\tlet regExpId = /^[a-z|A-Z|ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/; // 영문 대문자/소문자, 한글, 한글의 자음과 모음만 가능\r\n");
      out.write("\t\tlet regExpName = /^[가-힣]*$/; // 이름은 한글만 사용 가능. ^시작, $끝, *0이상 반복\r\n");
      out.write("\t\tlet regExpPasswd = /^[0-9]*$/; // 비밀번호는 숫자만 사용 가능\r\n");
      out.write("\t\tlet regExpPhone = /^\\d{3}-\\d{3,4}-\\d{4}$/; // 전화번호 형태만 가능. \\d{3}: 숫자3개. \\d{3,4}: 숫자3이상4이하\r\n");
      out.write("\t\tlet regExpEmail = /^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i; // 이메일 형태만 가능. i:ignore(대소문자 구별 안한다)\r\n");
      out.write("\t\t// 폼 object\r\n");
      out.write("\t\tlet form = document.Member;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tlet id = form.id.value; // 아이디. 문자형\r\n");
      out.write("\t\tlet name = form.name.value; // 이름\r\n");
      out.write("\t\tlet passwd = form.passwd.value; // 비밀번호\r\n");
      out.write("\t\tlet phone = form.phone1.value + \"-\" + form.phone2.value + \"-\" + form.phone3.value; // 연락처\r\n");
      out.write("\t\tlet email = form.email.value; // 이메일\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// Regular Expression의 메소드 중 test() => boolean으로 리턴\r\n");
      out.write("\t\t// 아이디 체크. !regExpId.test(id) : false(통과 못함)\r\n");
      out.write("\t\tif(!regExpId.test(id)) {\r\n");
      out.write("\t\t\talert(\"아이디는 문자로 시작해주세요!\");\r\n");
      out.write("\t\t\tform.id.select();\t//focus()\r\n");
      out.write("\t\t\treturn; // return : J/S 종료\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t// 이름 체크\r\n");
      out.write("\t\tif (!regExpName.test(name)) {\r\n");
      out.write("\t\t\talert(\"이름은 한글만 입력해주세요!\");\t// smith(x),스미스(o)\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t// 비밀번호 체크\r\n");
      out.write("\t\tif (!regExpPasswd.test(passwd)) {\r\n");
      out.write("\t\t\talert(\"비밀번호는 숫자만 입력해주세요!\");\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t// 연락처 체크(전화번호 형태만 가능)\r\n");
      out.write("\t\tif (!regExpPhone.test(phone)) {\r\n");
      out.write("\t\t\talert(\"연락처 입력을 확인해주세요!\");\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t// 이메일 체크\r\n");
      out.write("\t\tif (!regExpEmail.test(email)) {\r\n");
      out.write("\t\t\talert(\"이메일 입력을 확인해주세요!\");\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tform.submit();\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h3>회원 가입</h3>\r\n");
      out.write("\t<form name=\"Member\" method=\"post\" action=\"validation05_process.jsp\">\r\n");
      out.write("\t\t<p>아이디 : <input type=\"text\" name=\"id\" /></p>\r\n");
      out.write("\t\t<p>비밀번호 : <input type=\"password\" name=\"passwd\" /></p>\r\n");
      out.write("\t\t<p>이름 : <input type=\"text\" name=\"name\" /></p>\r\n");
      out.write("\t\t<p>연락처 :\r\n");
      out.write("\t\t\t<select name=\"phone1\">\r\n");
      out.write("\t\t\t\t<option value=\"010\">010</option>\r\n");
      out.write("\t\t\t\t<option value=\"011\">011</option>\r\n");
      out.write("\t\t\t\t<option value=\"016\">016</option>\r\n");
      out.write("\t\t\t\t<option value=\"017\">017</option>\r\n");
      out.write("\t\t\t\t<option value=\"019\">019</option>\r\n");
      out.write("\t\t\t</select> -\r\n");
      out.write("\t\t\t<input type=\"text\" maxlength=\"4\" size=\"4\" name=\"phone2\"> -\r\n");
      out.write("\t\t\t<input type=\"text\" maxlength=\"4\" size=\"4\" name=\"phone3\">\r\n");
      out.write("\t\t</p>\r\n");
      out.write("\t\t<p>이메일 : <input type=\"text\" name=\"email\" /></p>\r\n");
      out.write("\t\t<p><input type=\"button\" value=\"가입하기\" onclick=\"checkMember()\" /></p>\r\n");
      out.write("\t</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
