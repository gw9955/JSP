/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2022-10-12 05:10:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.homework._1011work;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class _1011work_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("   1. 다국어란 무엇인가?<br>\r\n");
      out.write("   - 다국어 처리는 웹 브라우저를 사용하는 국가에 따라 다양한 언어 및 지역을 지원하는 서비스를 말합니다.<br>\r\n");
      out.write("   - 지역화는 사용 국가별 환경에서 특정 언어와 지역에 맞게 적합화하는 것으로, 줄여서L10n으로 표기하기도 합니다.<br>\r\n");
      out.write("   - 국제화는 여러 국가에서 사용할 수 있도록 다국어를 지원하는 것으로, 줄여서 i18n으로 표기하기도 합니다. 국제화는 어느 국가에서나 사용할 수 있게 하는 지역화 기능을 포함합니다.<br>\r\n");
      out.write("   <hr />\r\n");
      out.write("   2. Locale 클래스를 이용한 다국어 처리 기법에서 현재 웹 브라우저에 미리 정의된 언어나 국가 정보를 가져오는 request 내장 객체의 메소드는 무엇인가?<br>\r\n");
      out.write("   - request.getLocale()<br>\r\n");
      out.write("   <hr />\r\n");
      out.write("   3. 다국어 처리를 위한 JSTL fmt 태그의 종류에 대해 설명하시오.<br>\r\n");
      out.write("   - 구분\t\t\t\t\t\t태그 유형\t\t\t\t\t\t\t설명<br>\r\n");
      out.write("   - Locale 설정\t\t\tsetLocale, requestEncoding\t\t로케일을 설정합니다, 요청 파라미터의 문자 인코딩을 설정합니다. <br>\r\n");
      out.write("   - 메시지 처리 \t\t\tbundle, message, setBundle\t\t사용할 리소스번들을 설정합니다, 리소스번들에서 로케일에 맞는 메시지를 가져와 출력합니다, 리소스번들을 읽어와 특정 변수에 저장합니다.<br>\r\n");
      out.write("   - 날짜 \t\t\t\tformatDate, parseDate\t\t\t날짜 형식을 표현합니다, 문자열에서 원하는 패턴의 날짜 형식으로 변환합니다.<br>\r\n");
      out.write("   - 숫자 \t\t\t\tparseNumber, formatNumber\t\t문자열에서 원하는 패턴의 숫자 형식으로 변환합니다, 숫자 형식을 표현합니다.<br>\r\n");
      out.write("   - 시간 \t\t\t\tsetTimeZone, timeZone\t\t\t특정 범위의 시간대를 설정합니다, 시간대를 설정합니다.<br>\r\n");
      out.write("   <hr />\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
