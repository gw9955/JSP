/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2022-10-13 10:22:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.homework._1013work;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class _1013work_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("   1. 필터란 무엇인가?<br>\r\n");
      out.write("   - 필터는 클라이언트와 서버 사이에서 request와 response 객체를 먼저 받아 사전/사후<br>\r\n");
      out.write("\t  작업 등 공통적으로 필요한 부분을 처리하는 것을 말합니다.<br>\r\n");
      out.write("   <hr />\r\n");
      out.write("   2. Filter 인터페이스에 있는 메소드의 종류와 기능을 설명하시오.<br>\r\n");
      out.write("   - 메소드,\t\t\t\t\t설명<br>\r\n");
      out.write("   - init(…),\t\t\t\t필터 인스턴스의 초기화 메소드입니다.<br>\r\n");
      out.write("   - doFilter(…),\t\t\t필터 기능을 작성하는 메소드입니다.<br>\r\n");
      out.write("   - destroy( ),\t\t\t필터 인스턴스의 종료 전에 호출되는 메소드입니다.<br>\r\n");
      out.write("   <hr />\r\n");
      out.write("   3. web.xml 파일에 필터를 구성하는 요소의 종류를 설명하시오.<br>\r\n");
      out.write("   - <filter><br>\r\n");
      out.write("   - 웹 애플리케이션에서 자바 필터와 매개변수를 설정하는 데 사용<br>\r\n");
      out.write("<!--    \t<filter> -->\r\n");
      out.write("<!-- \t<filter-name>필터 이름</filter-name> -->\r\n");
      out.write("<!-- \t<filter-class>클래스 이름</filter-class> -->\r\n");
      out.write("<!-- \t[<init-param> -->\r\n");
      out.write("<!-- \t<param-name>매개변수 이름</param-name> -->\r\n");
      out.write("<!-- \t<param-value>매개변수 값</param-value> -->\r\n");
      out.write("<!-- \t</init-param>] -->\r\n");
      out.write("<!-- \t</filter> -->\r\n");
      out.write("   - <filter-mapping><br>\r\n");
      out.write("   - 특정 리소스에 대해 어떤 필터를 사용할지 설정하는 데 사용하며<br>\r\n");
      out.write("<!--    \t<filter-mapping> -->\r\n");
      out.write("<!-- \t<filter-name>필터 이름</filter-name> -->\r\n");
      out.write("<!-- \t<url-pattern>요청 URL 패턴</url-pattern> -->\r\n");
      out.write("<!-- \t</filter-mapping> -->\r\n");
      out.write("   <hr />\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
